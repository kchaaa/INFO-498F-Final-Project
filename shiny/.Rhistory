x <- 3
x
source('~/info498f/r-intro-practice/exercise.r', echo=TRUE)
x <- c("lil bitch","ayy lmao" ,"deez nutz")
library(jsonlite)
library(dplyr)
library(audio)
top_track <- function(artist) {
base <- "https://api.spotify.com/v1/"
artist_search <- paste0(base, 'search?', 'q=', artist, '&type=artist')
info_artist <- fromJSON(artist_search)
id_artist <- info_artist$artists$item$id[1]
search_albums <- paste0(base, 'artists/', id_artist, '/top-tracks?country=US')
top_tracks <- fromJSON(search_albums)
return(top_tracks$tracks$name)
}
top_track("paul mccartney")
top_track("paul_mccartney")
top_track <- function(artist) {
base <- "https://api.spotify.com/v1/"
artist_search <- paste0(base, 'search?', 'q=', artist, '&type=artist')
info_artist <- fromJSON(artist_search)
id_artist <- info_artist$artists$item$id[1]
search_albums <- paste0(base, 'artists/', id_artist, '/top-tracks?country=UK')
top_tracks <- fromJSON(search_albums)
return(top_tracks$tracks$name)
}
top_track("paul_mccartney")
top_track("paul_mccartney")
top_track <- function(artist) {
base <- "https://api.spotify.com/v1/"
artist_search <- paste0(base, 'search?', 'q=', artist, '&type=artist')
info_artist <- fromJSON(artist_search)
id_artist <- info_artist$artists$item$id[1]
search_albums <- paste0(base, 'artists/', id_artist, '/top-tracks?country=US')
top_tracks <- fromJSON(search_albums)
return(top_tracks$tracks$name)
}
top_track("adele")
top_track("coldplay")
---
title: "index"
output: html_document
---
```{r,}
# Organization name
org <- 'INFO-498F'
library(jsonlite)
library(dplyr)
# Get user data
token <- '866c8cbf68d86c5000d0410140e5c5dd93d1bef5'
user_url <- paste0('https://api.github.com/users/', org, '?acess_token=', token)
user_data <- fromJSON(user_url)
# Gets the API data
repo_request <- paste(paste0(user_data$repos_url, '?access_token=', token), 'sort=created', 'per_page=100', sep = '&')
repo_data <- fromJSON(repo_request)
# Check if the returned data is a data frame
class(repo_data)
# Flatten the data
flattened_repo <- flatten(repo_data)
# Get the number of repos
num_repos <- nrow(flattened_repo)
# Get the most forked repository
most_forked <- repo_data$name[repo_data$forks == max(repo_data$forks)]
```
most_forked <- filter(flattened_repo, forks_count == max(forks_count))
most_Forked
most_forked
most_forked <- most_forked[1, 2]
most_forked
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
flattened_repo <- group_by(repo_data, flattened, language)
flattened_repo <- group_by(flattned_repo, language)
flattened_repo <- group_by(flattened_repo, language)
summary_table <- summarise(flattened_repo, num_repos = n(), avg_num_forks = mean(forks))
summary_table
library(jsonlite)
?kable
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
`r kable(user_info)`
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
user_info
names(user_url)
names(user_info)
```{r,}
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
```
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name","Description","Date_Created","URL","Num_Forks")
```
This table shows the repository name, description, url, created date, and number of forks for the `r num_repos` repositories `r org` has.
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name","Description","Date_Created","URL","Num_Forks","")
```
library(jsonlite)
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
data
library(jsonlite)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
library(dplyr)
install.packages("dplyr")
library(dplyr)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
### Bonus: create informative hover text ###
### Bonus: Use multiple colors ###
data
data$shots_fired
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
library(plotly)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
View(faithful)
rsconnect::deployApp('/Users/Pema/info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
rsconnect::deployApp('/Users/Pema/info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
data(iris)
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
rsconnect::deployApp('/Users/Pema/info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
install.packages("maps")
library(maps)
?maps
??mpas
??maps
??maps.cities
??maps
View(maps)
maps
maps
clear
map(mymap)
map(plot)
install.packages("ggmap")
library(ggmap)
geom_point(data=salesCalls, aes(x=lon, y=lat, size=Calls), color="orange")
geom_point(data=salesCalls, aes(x=lon, y=lat, size=Calls), color="orange")
source('~/info498f/INFO-498F-Final-Project/scripts/help_find.r', echo=TRUE)
LA <- map_data("state", region="michigan")
ggplot(LA, aes(x=long, y=lat)) +
geom_polygon() +
coord_map() +
geom_point(data=salesCalls, aes(x=lon, y=lat, size=Calls), color="orange")
ggplot(LA, aes(x=long, y=lat)) +
geom_polygon() +
coord_map()
LA <- map_data("city", region="flint")
LA <- map_data("cities", region="flint")
LA <- map_data("state", region="washington")
ggplot(LA, aes(x=long, y=lat)) +
geom_polygon() +
coord_map()
ggplot(LA, aes(x=long, y=lat))
ggplot(LA, aes(x=long, y=lat)) +
coord_map()
ggplot(LA, aes(x=long, y=lat)) +
geom_polygon() +
coord_map()
ggplot(LA, aes(x=long, y=lat))
geom+
coord_map()
ggplot(LA, aes(x=long, y=lat)) +
geom +
coord_map()
ggplot(LA, aes(x=long, y=lat)) +
geom_point() +
coord_map()
ggplot(LA, aes(x=long, y=lat)) +
geom_path() +
coord_map()
qmap('Flint')
qmap('Flint' maptype = "satelitte")
qmap('Flint', maptype = 'satelitte')
qmap('Flint', zoom = 16, maptype = 'satelitte')
qmap('Flint', zoom = 16, maptype = 'satellite')
qmap('Flint', zoom = 16, maptype = 'hybrid')
qmap('Flint', zoom = 16, maptype = 'terrain')
qmap('Flint', maptype = 'terrain')
map(database = "world", regions = ".")
getwd()
flint_sample <- read.csv("/Users/Pema/info498f/INFO-498F-Final-Project/data/Flint-SAMPLES-Final.csv")
View(flint_sample)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("/Users/Pema/info498f/INFO-498F-Final-Project")
source('~/.active-rstudio-document', echo=TRUE)
max_first_draw
max_45_sec
select(First_Draw)
max_first_draw <- data %>%
filter(max(First_Draw) == First_Draw) %>%
select(First_Draw)
max_first_draw
max_45_sec <- data %>%
filter(max(Flushing_45_Sec) == Flushing_45_Sec) %>%
select(Flushing_45_Sec)
max_2_min <- data %>%
filter(max(Flushing_2_Min) == Flushing_2_Min) %>%
select(Flushing_2_Min)
max_first_draw
max_45_sec
max_2_min
max_first_draw <- data %>%
filter(max(First_Draw) == First_Draw) %>%
select(First_Draw, ward)
max_first_draw <- data %>%
filter(max(First_Draw) == First_Draw) %>%
select(First_Draw, Ward)
max_45_sec <- data %>%
filter(max(Flushing_45_Sec) == Flushing_45_Sec) %>%
select(Flushing_45_Sec, Ward)
max_2_min <- data %>%
filter(max(Flushing_2_Min) == Flushing_2_Min) %>%
select(Flushing_2_Min, Ward)
max_2_min
qmap('Flint', maptype = 'terrain')
qmap('Flint', zoom = 10, maptype = 'terrain')
qmap('Flint', zoom = 16, maptype = 'terrain')
qmap('Flint', zoom = 12, maptype = 'terrain')
View(data)
View(data)
ggplot(data = 'data')
ggplot('data')
ggplot(data)
ggplot(data, aes(first_draw, flushing_45_Sec))
ggplot(data, aes(data$first_draw, data$flushing_45_Sec))
ggplot(data, aes(x = data$first_draw, y = data$flushing_45_Sec))
data <- read.csv('data/Flint-Samples-FINAL.csv')
colnames(data)[4] <- 'First_Draw'
colnames(data)[5] <- 'Flushing_45_Sec'
colnames(data)[6] <- 'Flushing_2_Min'
qmap('Flint', zoom = 12, maptype = 'terrain')
View(data)
colnames(flint_sample)[4] <- 'First_Draw'
colnames(flint_sample)[5] <- 'Flushing_45_Sec'
colnames(flint_sample)[6] <- 'Flushing_2_Min'
qmap('Flint', zoom = 12, maptype = 'terrain')
View(flint_sample)
ggplot(data, aes(x = data$first_draw, y = data$flushing_45_Sec))
coords <- cbind(Longitude = as.numeric(as.character(flint_sample$First_Draw), Latitude = as.numeric(as.character(flint_sample$Flushing_45_Sec)))
crime.pts <- SpatialPointsDataFrame(coords, crimes[, -(5:6)], proj4string = CRS("+init=epsg:4326"))
fline_sample.pts <- SpatialPointsDataFrame(coords, crimes[, -(5:6)], proj4string = CRS("+init=epsg:4326"))
ggplot(data, aes(x = flint_sample$First_Draw, y = flint_sample$Flushing_45_Sec))
ggplot(data, aes(flint_sample$First_Draw))
map <- qmap('Flint', zoom = 12, maptype = 'terrain')
ggplot(map + geom_point(color = "red", aes(flint_sample$First_Draw)))
require(mapproj)
ggplot(map + geom_point(color = "red", aes(flint_sample$First_Draw)))
ggplot(map, aes(flint_sample$First_Draw))
ggplot(flint_sample, aes(flint_sample$First_Draw))
ggplot(flint_sample, geom_point = aes(flint_sample$First_Draw))
ggplot(flint_sample, geom_point(color = "red", aes(flint_sample$First_Draw))
ggplot(flint_sample, geom_point(color = "red", aes(flint_sample$First_Draw)))
ggplot(flint_sample, geom_point(color = "red", aes(flint_sample$First_Draw)))
qmap('Flint', zoom = 12, maptype = 'terrain')
ggplot(flint_sample, geom_point(color = "red", aes(flint_sample$First_Draw)))
unique()
unique(flint_sample$Zip.Code)
getwd()
filter_data <- read.csv("/Users/Pema/info498f/INFO-498F-Final-Project/data/Flint_Water_Locations.csv")
filter_data <- read.csv("/Users/Pema/info498f/INFO-498F-Final-Project/data/Flint_Water_Filter_Locations.csv")
View(filter_data)
filter_data$location[1]
filter_data$Location(1)
summarise(filter_data)
class(filter_data)
filter_data$Building
filter_data$Location
filter_data$Location[1]
filter_data <- read.csv("/Users/Pema/info498f/INFO-498F-Final-Project/data/Flint_Water_Filter_Locations.csv")
View(filter_data)
ggplot(flint_sample, geom_point(color = "red", aes(x = Longitude, y = Latitude)))
ggplot(flint_sample, geom_point(color = "red", aes(x = Longitude, y = Latitude)))
ggplot(flint_sample +
geom_point(color = "red", aes(x = Longitude, y = Latitude)))
ggplot(flint_sample +
geom_point(color = "red", aes(x = filter_data$Longitude, y = filter_data$Latitude)))
coords <- cbind(Longitude = as.numeric(as.character(filter_data$Longitude)), Latitude = as.numeric(as.character(filter_data$Latitude)))
coords
filter_data.pts <- SpatialPointsDataFrame(coords, filter_data[, -(5:6)], proj4string = CRS("+init=epsg:4326"))
install.packages("sp")
install.packages("sp")
require(sp)
filter_data.pts <- SpatialPointsDataFrame(coords, filter_data[, -(5:6)], proj4string = CRS("+init=epsg:4326"))
plot(filter_data.pts, pch = ".", col = "darkred")
plot(filter_data.pts, col = "darkred")
plot(filter_data.pts)
filter_data.pts
plot(filter_data.pts)
filter_data.pts
map
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red")
coords
map + geom_point(data = coords, aes(x = Longitude, y = Latitude), color = "red")
?geom_point
geom_point(data = coords, aes(x = Longitude, y = Latitude), color = "red")
require(ggplot2)
geom_point(data = coords, aes(x = Longitude, y = Latitude), color = "red")
map + geom_point(data = coords, aes(x = Longitude, y = Latitude), color = "red")
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red")
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red", na.rm = TRUE)
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red", na.rm = TRUE, size = 10)
qmap('Flint', maptype = 'terrain')
require(ggmap)
qmap('Flint', maptype = 'terrain')
coords <- cbind(Longitude = as.numeric(as.character(filter_data$Longitude)), Latitude = as.numeric(as.character(filter_data$Latitude)))
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red", na.rm = TRUE, size = 10)
data_filters <- filter_data, na.rm = TRUE
data_filters <- (filter_data, na.rm = TRUE)
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red", size = 10)
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red", size = 10, alpha = 0.5)
map + geom_point(data = filter_data, aes(x = Longitude, y = Latitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
source('~/info498f/INFO-498F-Final-Project/scripts/help_find.r', echo=TRUE)
coords$Latitude
View(coords)
source('~/info498f/INFO-498F-Final-Project/scripts/help_find.r', echo=TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
qmap('Flint', zoom = 12, maptype = 'terrain')
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
map <- qmap('Flint', zoom = 12, maptype = 'terrain')
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
map <- qmap('Flint', zoom = 16, maptype = 'terrain')
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
map <- qmap('Flint', zoom = 13, maptype = 'terrain')
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
map <- qmap('Flint', zoom = 12, maptype = 'terrain')
coords <- cbind(Longitude = as.numeric(as.character(filter_data$Longitude)), Latitude = as.numeric(as.character(filter_data$Latitude)))
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "red", size = 10, alpha = 0.5, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.5, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 1, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.7, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.6, na.rm = TRUE)
map <- qmap('Flint', zoom = 12.5, maptype = 'terrain')
coords <- cbind(Longitude = as.numeric(as.character(filter_data$Longitude)), Latitude = as.numeric(as.character(filter_data$Latitude)))
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.6, na.rm = TRUE)
map <- qmap('Flint', zoom = 13, maptype = 'terrain')
coords <- cbind(Longitude = as.numeric(as.character(filter_data$Longitude)), Latitude = as.numeric(as.character(filter_data$Latitude)))
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.6, na.rm = TRUE)
map <- qmap('Flint', zoom = 12, maptype = 'terrain')
coords <- cbind(Longitude = as.numeric(as.character(filter_data$Longitude)), Latitude = as.numeric(as.character(filter_data$Latitude)))
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.6, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.6, na.rm = TRUE, show.legend = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "green", size = 10, alpha = 0.6, na.rm = TRUE, show.legend = NA)
install.packages("leaflet")
require(leaflet)
leaflet()
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=43.018281, lat=-83.691441, popup="Michigan Department of Health and Human Services Office")
m
?leaflet
?addTiles
m <- leaflet()
m <- addCircles(m)
m <- addMarkers(m, lng=43.018281, lat=-83.691441, popup="Michigan Department of Health and Human Services Office")
m
source('~/info498f/INFO-498F-Final-Project/scripts/help_find.r', echo=TRUE)
# Gets the terrain map of Flint, Michigan
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "blue", size = 10, alpha = 0.6, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "darkblue", size = 10, alpha = 0.6, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "darkblue", size = 10, alpha = 0.4, na.rm = TRUE)
map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "darkblue", size = 10, alpha = 0.8, na.rm = TRUE)
get_filter_map <- map + geom_point(data = filter_data, aes(filter_data$Latitude, filter_data$Longitude), color = "darkblue", size = 10, alpha = 0.8, na.rm = TRUE)
getwd()
data <- read.csv("/Users/Pema/info498f/INFO-498F-Final-Project/data/Flint_Water_Filter_Locations.csv")
library(ggplot2)
data(data)
filter_loc <- read.csv("/Users/Pema/info498f/INFO-498F-Final-Project/data/Flint_Water_Filter_Locations.csv")
data(filter_loc)
filter_loc
data(filter_loc)
getwd()
filter_loc <- read.csv("data/Flint_Water_Filter_Locations.csv")
data(filter_loc)
filter_loc
data(filter_loc)
getwd
filter_loc <- read.csv("data/Flint_Water_Filter_Locations.csv")
data(filter_loc)
p <- get_filter_map
shinyServer(
function(input, output) {
output$plot1 <- renderPlot({
p <- get_filter_map
print(p)
})
})
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
getwd()
library(ggplot2)
shiny::runApp('shiny')
shiny::runApp('shiny')
getwd
getwd()
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
map <- qmap('Flint', zoom = 12, maptype = 'terrain')
shiny::runApp('shiny')
shiny::runApp('shiny')
get_filter_map
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
?renderPrint
shiny::runApp('shiny')
?cat
?str
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
