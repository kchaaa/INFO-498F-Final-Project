puppies
puppies
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
puppies <- 100
cost <- 800
total_cost <- 800 * 100
major <- "informatics"
phrase <- phrase("My major is", major)
install.packages('stringr')
install.packages("stringr")
phrase <- phrase("My major is", "informatics")
puppies <- 100
cost <- 800
total_cost <- puppies * cost
phrase <- phrase("My major is", "informatics")
phrase <- phrase(x, y)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("mgcv")
library(stringr)
### Vectors ###
phrase <- phrase("My major is", "informatics")
# Assign your (intended/potential) major to a variable 'major'
major <- "informatics"
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
phrase <- phrase("My major is", major)
install.packages('stringr')
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("stringr")
phrase <- phrase("deez", "nutz")
install.packages('stringr')
install.packages("stringr")
library(stringr)
phrase <- phrase("deez", "nutz")
total_cost <- puppies * cost
# Create a variable 'puppies' equal to the number of puppies you'd like to have
puppies <- 100
# Create a variable 'cost', which is how expensive you think a puppy is
cost <- 800
# Create a variable 'total_cost' that has the total cost of all of your puppies
total_cost <- puppies * cost
# Assign your (intended/potential) major to a variable 'major'
major <- "informatics"
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
phrase <- paste("My major is", major)
total_cost <- puppies * cost
# Assign your (intended/potential) major to a variable 'major'
major <- "informatics"
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
phrase <- paste("My major is", major)
### Vectors ###
# Create a vector 'classes', which is a list of all the classes you're currently taking
classes <- c("info200", "info498", "stats221")
# Create a vector 'classes', which is a list of all the classes you're currently taking
classes <- c("info200", "info498", "stats221")
# Create a variable 'num_classes' by measuring the length of your 'classes' vector
num_classes <- length(classes)
favorite_class <- classes[2]
# Use the seq command to create a vector 'nums' with numbers 100 through 199
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
hours_per_week <- 32
hard_week <- hours_per_week * 1.5
nums <- seq(100, 199)
first_ten <- nums[seq(1, 10)]
source('~/info498f/r-intro-practice/exercise.r', echo=TRUE)
x <- 3
x
source('~/info498f/r-intro-practice/exercise.r', echo=TRUE)
x <- c("lil bitch","ayy lmao" ,"deez nutz")
library(jsonlite)
library(dplyr)
library(audio)
top_track <- function(artist) {
base <- "https://api.spotify.com/v1/"
artist_search <- paste0(base, 'search?', 'q=', artist, '&type=artist')
info_artist <- fromJSON(artist_search)
id_artist <- info_artist$artists$item$id[1]
search_albums <- paste0(base, 'artists/', id_artist, '/top-tracks?country=US')
top_tracks <- fromJSON(search_albums)
return(top_tracks$tracks$name)
}
top_track("paul mccartney")
top_track("paul_mccartney")
top_track <- function(artist) {
base <- "https://api.spotify.com/v1/"
artist_search <- paste0(base, 'search?', 'q=', artist, '&type=artist')
info_artist <- fromJSON(artist_search)
id_artist <- info_artist$artists$item$id[1]
search_albums <- paste0(base, 'artists/', id_artist, '/top-tracks?country=UK')
top_tracks <- fromJSON(search_albums)
return(top_tracks$tracks$name)
}
top_track("paul_mccartney")
top_track("paul_mccartney")
top_track <- function(artist) {
base <- "https://api.spotify.com/v1/"
artist_search <- paste0(base, 'search?', 'q=', artist, '&type=artist')
info_artist <- fromJSON(artist_search)
id_artist <- info_artist$artists$item$id[1]
search_albums <- paste0(base, 'artists/', id_artist, '/top-tracks?country=US')
top_tracks <- fromJSON(search_albums)
return(top_tracks$tracks$name)
}
top_track("adele")
top_track("coldplay")
---
title: "index"
output: html_document
---
```{r,}
# Organization name
org <- 'INFO-498F'
library(jsonlite)
library(dplyr)
# Get user data
token <- '866c8cbf68d86c5000d0410140e5c5dd93d1bef5'
user_url <- paste0('https://api.github.com/users/', org, '?acess_token=', token)
user_data <- fromJSON(user_url)
# Gets the API data
repo_request <- paste(paste0(user_data$repos_url, '?access_token=', token), 'sort=created', 'per_page=100', sep = '&')
repo_data <- fromJSON(repo_request)
# Check if the returned data is a data frame
class(repo_data)
# Flatten the data
flattened_repo <- flatten(repo_data)
# Get the number of repos
num_repos <- nrow(flattened_repo)
# Get the most forked repository
most_forked <- repo_data$name[repo_data$forks == max(repo_data$forks)]
```
most_forked <- filter(flattened_repo, forks_count == max(forks_count))
most_Forked
most_forked
most_forked <- most_forked[1, 2]
most_forked
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
flattened_repo <- group_by(repo_data, flattened, language)
flattened_repo <- group_by(flattned_repo, language)
flattened_repo <- group_by(flattened_repo, language)
summary_table <- summarise(flattened_repo, num_repos = n(), avg_num_forks = mean(forks))
summary_table
library(jsonlite)
?kable
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
`r kable(user_info)`
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
user_info
names(user_url)
names(user_info)
```{r,}
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name", "Description", "Date_Created", "URL", "Num_Forks")
```
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name","Description","Date_Created","URL","Num_Forks")
```
This table shows the repository name, description, url, created date, and number of forks for the `r num_repos` repositories `r org` has.
flattened_repo$created_at <- as.Date(flattened_repo$created_at)
user_info <- flattened_repo %>%
select(name, description, created_at, url, forks_count)
names(user_info) <- c("Repository_Name","Description","Date_Created","URL","Num_Forks","")
```
library(jsonlite)
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
data
library(jsonlite)
# Read in this police shooting JSON data
# https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
library(dplyr)
install.packages("dplyr")
library(dplyr)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
data <- fromJSON('https://raw.githubusercontent.com/mkfreeman/police-shooting/master/data/response.json')
# Dealing with the `Shots Fired` column
# Creating a new Numeric variable with no space in the name
# Replacing NA values with the mean (that makes sense, right?)
data$shots_fired <- as.numeric(data[,'Shots Fired'])
data <- data %>%
mutate(shots_fired = ifelse(is.na(shots_fired), mean(shots_fired, na.rm = T), shots_fired))
# Create a bubble map of the data
### Bonus: create informative hover text ###
### Bonus: Use multiple colors ###
data
data$shots_fired
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
library(plotly)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
source('~/info498f/lecture-11-exercises/exercise3.R', echo=TRUE)
View(faithful)
rsconnect::deployApp('/Users/Pema/info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
rsconnect::deployApp('/Users/Pema/info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
data(iris)
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
rsconnect::deployApp('/Users/Pema/info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
shiny::runApp('info498f/a8-building-applications/iris')
```{r, echo=FALSE, message=FALSE, warning=FALSE}
source('~/.active-rstudio-document', echo=TRUE)
getwd()
setwd("/Users/Pema/info498f/INFO-498F-Final-Project")
source('scripts/help_find.r')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
