shiny::runApp()
library(shiny)
runApp()
library(plotly)
library(shiny)
library(dplyr)
setwd("C:/Users/Administrator.UWIT-JAIE3J3AAH/Documents/Code/info498f/INFO-498F-Final-Project")
data <- read.csv("data/Flint-Samples-Final.csv")
source("scripts/plot.R")
shinyServer(function(input, output) {
output$bar <- renderPlotly({
plot(data, input$choice)
})
})
runApp('shiny')
runApp('shiny')
getwd
shinyAppDir(
system.file("/shiny/", package="shiny"),
options=list(
width="100%", height=700
)
)
library(shiny)
shinyAppDir(
system.file("/shiny/", package="shiny"),
options=list(
width="100%", height=700
)
)
library(shiny)
shinyAppDir(
system.file("/shiny/ui.R", package="shiny"),
options=list(
width="100%", height=700
)
)
flush <- colnames(data)[4:6]
shinyApp(
ui = fluidPage(
titlePanel("Flint Water Contamination"),
sidebarLayout(
sidebarPanel(
"Contamination",
selectInput("choice", label = h3("Time"),
choices = flush, selected = "Pb.Bottle.1..ppb....First.Draw")
),
mainPanel(
plotlyOutput("bar")
)
)
),
#
server = function(input, output) {
output$bar <- renderPlotly({
plot(data, input$choice)
})
})
library(plotly)
flush <- colnames(data)[4:6]
shinyApp(
ui = fluidPage(
titlePanel("Flint Water Contamination"),
sidebarLayout(
sidebarPanel(
"Contamination",
selectInput("choice", label = h3("Time"),
choices = flush, selected = "Pb.Bottle.1..ppb....First.Draw")
),
mainPanel(
plotlyOutput("bar")
)
)
),
#
server = function(input, output) {
output$bar <- renderPlotly({
plot(data, input$choice)
})
})
View(data)
FINAL.csv
data <- read.csv('data/Flint-Samples-FINAL.csv')
View(data)
data2 <- read.csv("/data/Flint_Water_Filter_Locations.CSV")
setwd("C:/Users/Administrator.UWIT-JAIE3J3AAH/Documents/Code/info498f/INFO-498F-Final-Project")
data2 <- read.csv("/data/Flint_Water_Filter_Locations.CSV")
data2 <- read.csv("data/Flint_Water_Filter_Locations.CSV")
setwd("C:/Users/Administrator.UWIT-JAIE3J3AAH/Documents/Code/info498f/INFO-498F-Final-Project")
data <- read.csv("data/Flint-Samples-FINAL.CSV")
data2 <- read.csv("data/Flint_Water_Filter_Locations.CSV")
View(data)
View(data2)
plot1 <- plot_ly(data, x = data[,4], y = data[,5], z = data[,6], type = "scatter3d")
View(plot1)
plot1
plot1 <- plot_ly(data, x = data[,4], y = data[,5], z = data[,6], type = "scatter3d", size = 1)
plot_ly(data, x = data[,4], y = data[,5], z = data[,6], type = "scatter3d", size = 1)
plot_ly(data, x = data[,4], y = data[,5], z = data[,6], type = "scatter3d", size = 0.1)
plot_ly(data, x = data[,4], y = data[,5], z = data[,6], type = "scatter3d")
#--------------------------------------------------------------#
# Flint, MI has a water problem. This dataset only deals with 271 households.
# Requires dplyr, library
library(dplyr)
# Import helper scripts.
source('scripts/help_find.r')
source('scripts/plot.r')
# Reads in the dataset.
data <- read.csv('data/Flint-Samples-FINAL.csv')
# Renames 3 of the columns to be more readable
colnames(data)[4] <- 'First_Draw'
colnames(data)[5] <- 'Flushing_45_Sec'
colnames(data)[6] <- 'Flushing_2_Min'
#--------------------------------------------------------------#
# This section finds the max levels of lead (ppb).
# Obtains the households with the highest level of lead (ppb) from the first sample.
max_first_draw <- data %>%
filter(max(First_Draw) == First_Draw)
# Obtains the households with the highest level of lead (ppb) from the sample 45 seconds after flushing.
max_45_sec <- data %>%
filter(max(Flushing_45_Sec) == Flushing_45_Sec)
# Obtains the households with the highest level of lead (ppb) from the sample 2 minutes after flushing.
max_2_min <- data %>%
filter(max(Flushing_2_Min) == Flushing_2_Min)
#--------------------------------------------------------------#
# This section checks which households tested above the worrisome level of led (5ppb).
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the first sample.
warning_first_draw <- data %>%
filter(First_Draw > 5)
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the sample 45 seconds after flushing.
warning_45_sec <- data %>%
filter(Flushing_45_Sec > 5)
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the sample 2 minutes after flushing.
warning_2_min <- data %>%
filter(Flushing_2_Min > 5)
# Combines the households that have high ppb levels for all 3 samples.
warning_levels <- inner_join(warning_2_min, warning_45_sec, by = c('SampleID', 'Zip.Code', 'Ward', 'First_Draw', 'Flushing_45_Sec', 'Flushing_2_Min', 'Notes'), copy=FALSE)
warning_levels <- inner_join(warning_levels, warning_first_draw, by = c('SampleID', 'Zip.Code', 'Ward', 'First_Draw', 'Flushing_45_Sec', 'Flushing_2_Min', 'Notes'), copy=FALSE)
#--------------------------------------------------------------#
# This section checks which households tested above the EPA allowed level of led (15ppb). This is when action is necessary.
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the first sample.
above_epa_first_draw <- data %>%
filter(First_Draw > 15)
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the sample 45 seconds after flushing.
above_epa_45_sec <- data %>%
filter(Flushing_45_Sec > 15)
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the sample 2 minutes after flushing.
above_epa_2_min <- data %>%
filter(Flushing_2_Min > 15)
# Combines the households that have high ppb levels for all 3 samples.
above_epa <- inner_join(above_epa_2_min, above_epa_45_sec, by = c('SampleID', 'Zip.Code', 'Ward', 'First_Draw', 'Flushing_45_Sec', 'Flushing_2_Min', 'Notes'), copy=FALSE)
above_epa <- inner_join(above_epa, above_epa_first_draw, by = c('SampleID', 'Zip.Code', 'Ward', 'First_Draw', 'Flushing_45_Sec', 'Flushing_2_Min', 'Notes'), copy=FALSE)
#--------------------------------------------------------------#
# This section tallies the numbers to compare.
# Initial number of samples.
num_initial <- nrow(data)
# Number of households with high ppb levels for first sample.
num_first_high_warning <- nrow(warning_first_draw)
# Number of households with standard or lower ppb levels as compared to the high ppb levels for the first sample.
num_first_low_warning<- num_initial - num_first_high_warning
# Number of households with high ppb levels for sample 45 seconds after flushing.
num_45_high_warning <- nrow(warning_45_sec)
# Number of households with high ppb levels for sample 2 minutes after flushing.
num_2_high_warning <- nrow(warning_2_min)
# Number of households that have high ppb levels for all 3 categories.
num_all_high_warning <- nrow(warning_levels)
# Number of households with dangerously high ppb levels for first sample.
num_first_high_danger <- nrow(above_epa_first_draw)
# Number of households with standard or lower ppb levels as compared to the dangerously high ppb levels for the first sample.
num_first_low_danger <- num_initial - num_first_high_danger
# Number of households with dangerously high ppb levels for sample 45 seconds after flushing.
num_45_high_danger <- nrow(above_epa_45_sec)
# Number of households with dangerously high ppb levels for sample 2 minutes after flushing.
num_2_high_danger <- nrow(above_epa_2_min)
# Number of households that have dangerously high ppb levels for all 3 categories.
num_all_high_danger <- nrow(above_epa)
#--------------------------------------------------------------#
# This section finds out which ward has the worst problem
# Which ward has the highest concentration of ppb levels.
# Checks the households in Ward 1
ward_1 <- data %>%
filter(Ward == 1)
ward_1_high <- ward_1 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_1 <- nrow(ward_1_high)
# Checks the households in Ward 2
ward_2 <- data %>%
filter(Ward == 2)
ward_2_high <- ward_2 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_2 <- nrow(ward_2_high)
# Checks the households in Ward 3
ward_3 <- data %>%
filter(Ward == 3)
ward_3_high <- ward_3 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_3 <- nrow(ward_3_high)
# Checks the households in Ward 4
ward_4 <- data %>%
filter(Ward == 4)
ward_4_high <- ward_4 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_4 <- nrow(ward_4_high)
# Checks the households in Ward 5
ward_5 <- data %>%
filter(Ward == 5)
ward_5_high <- ward_5 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_5 <- nrow(ward_5_high)
# Checks the households in Ward 6
ward_6 <- data %>%
filter(Ward == 6)
ward_6_high <- ward_6 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_6 <- nrow(ward_6_high)
# Checks the households in Ward 7
ward_7 <- data %>%
filter(Ward == 7)
ward_7_high <- ward_7 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_7 <- nrow(ward_7_high)
# Checks the households in Ward 8
ward_8 <- data %>%
filter(Ward == 8)
ward_8_high <- ward_8 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_8 <- nrow(ward_8_high)
# Checks the households in Ward 9
ward_9 <- data %>%
filter(Ward == 9)
ward_9_high <- ward_9 %>%
filter(First_Draw > 15 | Flushing_45_Sec > 15 | Flushing_2_Min > 15)
num_ward_9 <- nrow(ward_9_high)
#--------------------------------------------------------------#
# This section implements the shiny framework in an inline fashion
library(shiny)
<<<<<<< HEAD
setwd("D:/Code/info498f/INFO-498F-Final-Project")
getwd()
=======
library(plotly)
flush <- colnames(data)[4:6]
shinyApp(
ui = fluidPage(
titlePanel("Flint Water Contamination"),
sidebarLayout(
sidebarPanel(
"Contamination",
selectInput("choice", label = h3("Time"),
choices = flush, selected = "Pb.Bottle.1..ppb....First.Draw")
),
mainPanel(
plotlyOutput("bar")
)
)
),
#
server = function(input, output) {
output$bar <- renderPlotly({
plot(data, input$choice)
})
})
warning_levels
View(warning_levels)
num_all_high_danger
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the first sample.
above_epa_first_draw <- data %>%
filter(First_Draw > 15)
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the sample 45 seconds after flushing.
above_epa_45_sec <- data %>%
filter(Flushing_45_Sec > 15)
# Obtains the households with ppb levels above the EPA allowed level (15ppb) for the sample 2 minutes after flushing.
above_epa_2_min <- data %>%
filter(Flushing_2_Min > 15)
# Combines the households that have high ppb levels for all 3 samples.
above_epa <- inner_join(above_epa_2_min, above_epa_45_sec, by = c('SampleID', 'Zip.Code', 'Ward', 'First_Draw', 'Flushing_45_Sec', 'Flushing_2_Min', 'Notes'), copy=FALSE)
above_epa <- inner_join(above_epa, above_epa_first_draw, by = c('SampleID', 'Zip.Code', 'Ward', 'First_Draw', 'Flushing_45_Sec', 'Flushing_2_Min', 'Notes'), copy=FALSE)
View(above_epa)
View(above_epa[,1])
View(above_epa[1,])
View(above_epa[,0])
View(above_epa[,1])
View(above_epa)
plot_ly(above_epa, x = above_epa[,3], y = above_epa[,4], color = above_epa[,6], type = "scatter")
plot_ly(above_epa, x = above_epa[,3], y = above_epa[,4], color = above_epa[,6], type = "scatter", mode = "marker")
plot_ly(above_epa, x = above_epa[,4], y = above_epa[,6], color = above_epa[,3], type = "scatter")
plot_ly(above_epa, x = above_epa[,4], y = above_epa[,6], color = above_epa[,3], type = "scatter", mode = "markers")
print(source('shiny/inline.R')$value)
plot2 <- function(dataset) {
return(plot_ly(data = dataset, x = above_epa[,4], y = above_epa[,6], color = above_epa[,3], type = "scatter", mode = "markers")
)
}
plot2(data)
data <- read.csv("data/Flint-Samples-Final.csv")
plot2(data)
plot2 <- function(dataset) {
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = dataset[,3], type = "scatter", mode = "markers")
)
}
plot2(data)
plot2 <- function(dataset) {
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = dataset[,3], type = "scatter", mode = "markers")
)
}
plot2(warning_levels)
"Warning Level" = 'warning_levels'), selected = 'warning_levels')
'above_epa'
above_epa
warning_levels
setdata <- list(above_epa, warning_levels)
setdata <- names(above_epa, warning_levels)
setdata <- list(above_epa, warning_levels)
setdata <- colnames(above_epa, warning_levels)
setdata <- list("Above EPA" = above_epa, "Warning Levels" = warning_levels)
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = dataset[,3], type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Pb Level Pre-Flush"), yaxis = list(title = "Pb Level 2 Min After"), color = list(title = "Wards"))
)
plot2 <- function(dataset) {
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = dataset[,3], type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Pb Level Pre-Flush"), yaxis = list(title = "Pb Level 2 Min After"),
color = list(title = "Wards"))
)
}
plot2(warning_levels)
plot2 <- function(dataset) {
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = "Ward", type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Pb Level Pre-Flush"), yaxis = list(title = "Pb Level 2 Min After"),
color = list(title = "Wards"))
)
}
plot2 <- function(dataset) {
plot2 <- function(dataset) {
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = "Ward", type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Pb Level Pre-Flush"), yaxis = list(title = "Pb Level 2 Min After"),
color = list(title = "Wards"))
)
}
plot2(above_epa)
plot2 <- function(dataset) {
Wards <- dataset[,3]
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = Wards, type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Pb Level Pre-Flush"), yaxis = list(title = "Pb Level 2 Min After")))
}
plot2(warning_levels)
plot2(above_epa)
plot2 <- function(dataset) {
Wards <- dataset[,3]
return(plot_ly(data = dataset, x = dataset[,4], y = dataset[,6], color = Wards, type = "scatter", mode = "markers") %>%
layout(xaxis = list(title = "Pb Level Pre-Flush"), yaxis = list(title = "Pb Level 2 Min After")))
}
plot2(warning_levels)
>>>>>>> 0e8052b58e9bc46ee688d5f20a651b8759774573
